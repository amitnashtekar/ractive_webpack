$white			: #ffffff;
$white-medium	: #d6d6d6;
$white-dark		: #ececec;

$dark-teal		: #007d85;
$storm			: #666666;
$shade			: #ececec;
$mercury		: #cccccc;

$yellow			: #fdcc08;
$yellow-medium	: #e2aa03;
$yellow-dark	: #f9bb00;
$yellow-dark2	: #ffc300;
$yellow-darker	: #ffc300;
$yellow-darkest	: #fda800;

$teal 			: #00a3ad;
$teal2			: #00aad4;
$teal-light     : #00c4d0;
$teal-light2    : #d3eaec;
$teal-medium	: #05737a;
$teal-dark		: #008a92;
$teal-dark2		: #e3e9ec;
$teal-dark3		: #007d85;

$blue			: #006280;
$blue-medium	: #083d4e;
$blue-dark		: #004d65;
$blue-light 	: #007195;
$blue-light2	: #def1f3;
$blue-dark		: #005a77;
$blue-black 	: #033241;
$blue-dark-black: #022a37;

$purple			: #444292;

$navy           : #172659;

$berry			: #80276c;
$berry-dark			: #5a1b4c;
$berry-medium			: #73176c;

$pink 			: #ff6e7e;

$green			: #7ec848;
$green-shadow	: #68b529;

$black			: #191919;
$black-100		: #000000;
$black-90		: #323232;
$black-60		: #666666;
$black-50		: #8f8f8f;
$black-40		: #999999;
$black-20		: #cccccc;
$black-15		: #e5e5e5;
$black-10		: #e5e5e5;

$grey-light 	: #f1f4f6;
$grey-medium 	: #e3e9ec;
$grey 			: #d1d7da;
$grey-dark 		: #acafb2;
$grey-darker	: #888a8c;
$grey-darkest 	: #575859;

$light-grey		: $black-15;
$dark-grey		: $black-90;

$scarlet		: #fc3700;
$dark-teal 		: #007d85;
$storm 			: #666666;
$mercury 		: #cccccc;

$orange 		: #ff8200;
$orange-dark	: #da3a00;
$orange-shadow	: #d96f00;

$stone-light	: #aca39a;
$stone			: #83786f;

$body-bg			: $white;
$body-font-color	: $black;

$primary-color 		: $teal;
$secondary-color 	: $blue;

$scarlet		: #fc3700;
$dark-teal 		: #007d85;
$storm 			: #666666;
$mercury 		: #cccccc;
$shade			: #191919;
$pale-slate     : #bdbbbc;

$red 			: $orange-dark;
$red-light 		: #fdf3f0;
$red-shadow		: #b93100;
$rebrand-red	: #d93a1b;

$inactive-grey	: #dbdbdb;
$smoke			: #f5f5f5;

$rem-base: 16px !default;

@function rem-calc($values, $base-value: $rem-base) {
	$max: length($values);

	@if $max == 1 {
		@return convert-to-rem(nth($values, 1), $base-value);
	}

	$remValues: ();
	@for $i from 1 through $max {
		$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
	}
	@return $remValues;
}

// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function emCalc($values) {
	@return rem-calc($values);
}

// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function em-calc($values) {
	@return rem-calc($values);
}

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base) {
	$value: strip-unit($value) / strip-unit($base-value) * 1rem;
	@if ($value == 0rem) {
		$value: 0;
	}
	// Turn 0rem into 0
	@return $value;
}

// Using EMs - Calculate an EM from a different Base
@function emReCalc($emSize, $emBase: emCalc($em-base)) {
	@return ($emSize / $emBase) * 1em;
}

